import { useState, useEffect } from 'react';
import MainLayout from '../../layouts/MainLayout';
import { useAuth } from '../../context/AuthContext'; // Assuming you have AuthContext for role-based access
import Loader from '../../components/Loader'; // Assuming a Loader component
import Modal from '../../components/Modal'; // Assuming a reusable Modal component for confirmations

const ManageJobsPage = () => {
  const { user, loading: authLoading } = useAuth(); // Get user and loading state from AuthContext
  const [jobs, setJobs] = useState([]);
  const [newJob, setNewJob] = useState({
    title: '',
    company: '',
    location: '',
    description: '',
  });
  const [editingJobId, setEditingJobId] = useState(null);
  const [formError, setFormError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [jobToDelete, setJobToDelete] = useState(null);

  useEffect(() => {
    if (!authLoading && (!user || user.role !== 'admin')) {
      router.push('/login'); // Redirect if not authorized
    } else {
      fetchJobs();
    }
  }, [authLoading, user]);

  const fetchJobs = async () => {
    setLoading(true);
    // Simulate fetching jobs from an API (replace with real API call)
    setTimeout(() => {
      setJobs([
        { id: 1, title: 'Software Developer', company: 'Tech Innovators', location: 'San Francisco, CA' },
        { id: 2, title: 'Data Analyst', company: 'DataHub Inc.', location: 'Remote' },
      ]);
      setLoading(false);
    }, 1000);
  };

  const handleInputChange = (e: any) => {
    const { name, value } = e.target;
    setNewJob({
      ...newJob,
      [name]: value,
    });
  };

  const handleAddJob = (e: any) => {
    e.preventDefault();
    if (!newJob.title || !newJob.company || !newJob.location || !newJob.description) {
      setFormError('All fields are required.');
      return;
    }
    setJobs([...jobs, { id: jobs.length + 1, ...newJob }]); // Optimistically update the UI
    setNewJob({ title: '', company: '', location: '', description: '' });
    setFormError(null);
  };

  const handleEditJob = (job: any) => {
    setNewJob(job);
    setEditingJobId(job.id);
  };

  const handleUpdateJob = (e: any) => {
    e.preventDefault();
    setJobs(jobs.map(job => (job.id === editingJobId ? { ...job, ...newJob } : job)));
    setNewJob({ title: '', company: '', location: '', description: '' });
    setEditingJobId(null);
  };

  const handleDeleteJob = async () => {
    setJobs(jobs.filter(job => job.id !== jobToDelete.id)); // Optimistically update the UI
    setIsDeleteModalOpen(false);
    setJobToDelete(null);
  };

  const openDeleteModal = (job: any) => {
    setJobToDelete(job);
    setIsDeleteModalOpen(true);
  };

  if (authLoading || loading) {
    return <Loader />;
  }

  return (
    <MainLayout title="Manage Jobs" description="Admin panel to manage jobs">
      <section className="manage-jobs-section">
        <h1>Manage Jobs</h1>

        <div className="job-form">
          <h2>{editingJobId ? 'Edit Job' : 'Add New Job'}</h2>
          <form onSubmit={editingJobId ? handleUpdateJob : handleAddJob}>
            <label htmlFor="title">Job Title</label>
            <input
              type="text"
              id="title"
              name="title"
              value={newJob.title}
              onChange={handleInputChange}
              required
            />

            <label htmlFor="company">Company</label>
            <input
              type="text"
              id="company"
              name="company"
              value={newJob.company}
              onChange={handleInputChange}
              required
            />

            <label htmlFor="location">Location</label>
            <input
              type="text"
              id="location"
              name="location"
              value={newJob.location}
              onChange={handleInputChange}
              required
            />

            <label htmlFor="description">Description</label>
            <textarea
              id="description"
              name="description"
              value={newJob.description}
              onChange={handleInputChange}
              required
            ></textarea>

            {formError && <p className="error-message">{formError}</p>}
            <button type="submit">{editingJobId ? 'Update Job' : 'Add Job'}</button>
          </form>
        </div>

        <div className="job-listings">
          <h2>Current Jobs</h2>
          {jobs.length > 0 ? (
            <ul>
              {jobs.map((job) => (
                <li key={job.id}>
                  <h3>{job.title}</h3>
                  <p><strong>Company:</strong> {job.company}</p>
                  <p><strong>Location:</strong> {job.location}</p>
                  <div className="job-actions">
                    <button onClick={() => handleEditJob(job)}>Edit</button>
                    <button onClick={() => openDeleteModal(job)}>Delete</button>
                  </div>
                </li>
              ))}
            </ul>
          ) : (
            <p>No jobs available.</p>
          )}
        </div>
      </section>

      {/* Delete confirmation modal */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        onConfirm={handleDeleteJob}
        title="Confirm Deletion"
        body={`Are you sure you want to delete "${jobToDelete?.title}"?`}
      />

      {/* Page-specific styles */}
      <style jsx>{`
        .manage-jobs-section {
          padding: 20px;
          background-color: #f9f9f9;
        }
        .job-form {
          margin-bottom: 30px;
        }
        .job-form form {
          display: flex;
          flex-direction: column;
          gap: 10px;
        }
        .job-actions {
          margin-top: 10px;
          display: flex;
          gap: 10px;
        }
        .error-message {
          color: red;
          font-weight: bold;
        }
        @media (max-width: 768px) {
          .manage-jobs-section {
            padding: 10px;
          }
        }
      `}</style>
    </MainLayout>
  );
};

export default ManageJobsPage;
